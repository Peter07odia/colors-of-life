{
  "meta": {
    "instanceId": "colors-of-life-fashion-search"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "fashion-search",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "fashion-webhook",
      "name": "🎯 Fashion Search Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "fashion-search-webhook"
    },
    {
      "parameters": {
        "jsCode": "// 🧠 Smart Fashion Query Processor\n// Analyzes and enhances user search queries with robust error handling\n\nconsole.log('=== QUERY PROCESSOR START ===');\n\n// Safely get input data\nlet inputData = {};\nlet searchQuery = 'fashion';\nlet userId = 'anonymous';\nlet maxResults = 20;\n\ntry {\n  const inputs = $input.all();\n  if (inputs.length > 0 && inputs[0] && inputs[0].json) {\n    inputData = inputs[0].json;\n    console.log('✅ Input received:', Object.keys(inputData));\n    \n    // Extract query from multiple possible fields\n    searchQuery = inputData.query || inputData.searchQuery || inputData.q || inputData.search || 'fashion';\n    userId = inputData.user_id || inputData.userId || inputData.user || 'anonymous';\n    maxResults = Math.max(1, Math.min(100, parseInt(inputData.maxResults || inputData.limit) || 20));\n    \n    console.log('🔍 Extracted query:', searchQuery);\n    console.log('👤 User ID:', userId);\n  }\n} catch (error) {\n  console.log('❌ Error processing input:', error.message);\n}\n\n// Enhanced query analysis\nfunction analyzeQuery(query) {\n  const original = String(query).toLowerCase().trim();\n  \n  // Category detection\n  let category = 'general';\n  if (original.includes('dress')) category = 'dresses';\n  else if (original.includes('shirt') || original.includes('top') || original.includes('blouse')) category = 'tops';\n  else if (original.includes('pants') || original.includes('jeans') || original.includes('trouser')) category = 'bottoms';\n  else if (original.includes('shoe') || original.includes('boot') || original.includes('sneaker')) category = 'shoes';\n  \n  // Color detection\n  const colors = [];\n  const colorList = ['red', 'blue', 'green', 'yellow', 'black', 'white', 'pink', 'purple', 'orange', 'brown', 'gray', 'grey', 'navy', 'beige'];\n  colorList.forEach(color => {\n    if (original.includes(color)) colors.push(color);\n  });\n  \n  // Style detection\n  let style = 'general';\n  if (original.includes('casual')) style = 'casual';\n  else if (original.includes('formal') || original.includes('office')) style = 'formal';\n  else if (original.includes('summer') || original.includes('light')) style = 'summer';\n  else if (original.includes('winter') || original.includes('warm')) style = 'winter';\n  \n  // Create expanded query\n  const expandedTerms = [original];\n  if (colors.length > 0) expandedTerms.push(...colors);\n  if (category !== 'general') expandedTerms.push(category);\n  expandedTerms.push('fashion', 'clothing');\n  \n  return {\n    original: query.trim(),\n    expanded: [...new Set(expandedTerms)].join(' '),\n    category: category,\n    style: style,\n    colors: colors\n  };\n}\n\nconst queryAnalysis = analyzeQuery(searchQuery);\n\nconst result = {\n  userId: userId,\n  searchQuery: queryAnalysis,\n  maxResults: maxResults,\n  searchType: 'comprehensive',\n  timestamp: new Date().toISOString(),\n  debug: {\n    originalInput: inputData,\n    processedQuery: queryAnalysis.original\n  }\n};\n\nconsole.log('🎯 Final processed data:', JSON.stringify(result, null, 2));\nconsole.log('=== QUERY PROCESSOR END ===');\n\nreturn result;"
      },
      "id": "query-processor",
      "name": "🧠 Smart Query Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "query": "={{ $json.searchQuery.expanded }}",
        "count": "={{ $json.maxResults || 10 }}",
        "offset": 0
      },
      "id": "web-search",
      "name": "🌐 Web Fashion Search",
      "type": "mcp_brave-search.brave_web_search",
      "typeVersion": 1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "query": "SELECT \n  p.id,\n  p.name,\n  p.description,\n  p.price,\n  p.original_price,\n  p.images,\n  p.colors,\n  p.sizes,\n  p.tags,\n  p.materials,\n  p.product_code,\n  b.name as brand_name,\n  c.name as category_name\nFROM products p\nLEFT JOIN brands b ON p.brand_id = b.id\nLEFT JOIN categories c ON p.category_id = c.id\nWHERE \n  p.name ILIKE '%{{ $json.searchQuery.original }}%'\n  OR p.description ILIKE '%{{ $json.searchQuery.original }}%'\n  OR p.tags::text ILIKE '%{{ $json.searchQuery.original }}%'\n  {% if $json.searchQuery.colors.length > 0 %}\n  OR p.colors::text ILIKE ANY(ARRAY[{% for color in $json.searchQuery.colors %}'%{{ color }}%'{% if not loop.last %},{% endif %}{% endfor %}])\n  {% endif %}\n  {% if $json.searchQuery.category != 'general' %}\n  OR c.name ILIKE '%{{ $json.searchQuery.category }}%'\n  {% endif %}\nORDER BY \n  CASE \n    WHEN p.name ILIKE '%{{ $json.searchQuery.original }}%' THEN 1\n    WHEN p.description ILIKE '%{{ $json.searchQuery.original }}%' THEN 2\n    ELSE 3\n  END,\n  p.created_at DESC\nLIMIT {{ $json.maxResults || 20 }};",
        "operation": "executeQuery"
      },
      "id": "db-search",
      "name": "🗄️ Database Search",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [680, 400],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 🎯 FINAL Smart Results Aggregator\n// Combines web and database results with intelligent ranking\n\nconsole.log('=== FINAL AGGREGATOR START ===');\n\nconst allInputs = $input.all();\nconsole.log('📊 Total inputs:', allInputs.length);\n\n// Initialize containers\nlet queryData = null;\nlet webResults = [];\nlet dbResults = [];\n\n// Process inputs\nallInputs.forEach((input, index) => {\n  const data = input.json;\n  console.log(`Input ${index}:`, data ? Object.keys(data) : 'null');\n  \n  // Query processor data\n  if (data && data.searchQuery && data.userId) {\n    queryData = data;\n    console.log('✅ Query data found:', data.searchQuery.original);\n  }\n  \n  // Web search results\n  else if (data && data.results && Array.isArray(data.results)) {\n    console.log('🌐 Web results:', data.results.length);\n    webResults = data.results.map((item, idx) => ({\n      id: `web_${idx}`,\n      title: item.title || 'Web Result',\n      description: item.snippet || item.description || '',\n      url: item.url,\n      source: 'web',\n      type: 'web_result',\n      relevanceScore: calculateRelevance(item, queryData?.searchQuery)\n    }));\n  }\n  \n  // Database results\n  else if (Array.isArray(data)) {\n    console.log('🗄️ Database results:', data.length);\n    dbResults = data.map((item, idx) => ({\n      id: item.id || `db_${idx}`,\n      title: item.name || 'Fashion Item',\n      description: item.description || '',\n      image: parseImages(item.images),\n      price: item.price ? `$${item.price}` : null,\n      originalPrice: item.original_price ? `$${item.original_price}` : null,\n      brand: item.brand_name || item.brand_id,\n      category: item.category_name || item.category_id,\n      colors: item.colors || [],\n      sizes: item.sizes || [],\n      tags: item.tags || [],\n      materials: item.materials || [],\n      productCode: item.product_code,\n      source: 'internal',\n      type: 'fashion_item',\n      relevanceScore: calculateRelevance(item, queryData?.searchQuery)\n    }));\n  }\n});\n\n// Fallback query data\nif (!queryData) {\n  console.log('⚠️ Using fallback query data');\n  queryData = {\n    searchQuery: { original: 'fashion', expanded: 'fashion clothing', category: 'general', colors: [] },\n    userId: 'anonymous',\n    maxResults: 20\n  };\n}\n\n// Helper functions\nfunction parseImages(images) {\n  if (!images) return null;\n  if (typeof images === 'string') {\n    try {\n      const parsed = JSON.parse(images);\n      return Array.isArray(parsed) ? parsed[0] : parsed;\n    } catch { return images; }\n  }\n  return Array.isArray(images) ? images[0] : images;\n}\n\nfunction calculateRelevance(item, searchQuery) {\n  if (!searchQuery) return 1;\n  \n  const query = searchQuery.original.toLowerCase();\n  const title = (item.title || item.name || '').toLowerCase();\n  const description = (item.description || item.snippet || '').toLowerCase();\n  \n  let score = 0;\n  \n  // Exact matches\n  if (title.includes(query)) score += 30;\n  if (description.includes(query)) score += 15;\n  \n  // Color matching\n  if (searchQuery.colors && searchQuery.colors.length > 0) {\n    searchQuery.colors.forEach(color => {\n      if (title.includes(color) || description.includes(color)) {\n        score += 20;\n      }\n    });\n  }\n  \n  // Word matching\n  const queryWords = query.split(' ').filter(w => w.length > 2);\n  queryWords.forEach(word => {\n    if (title.includes(word)) score += 8;\n    if (description.includes(word)) score += 5;\n  });\n  \n  // Quality bonuses\n  if (item.source === 'internal') score += 5;\n  if (item.image || item.images) score += 3;\n  if (item.price) score += 2;\n  \n  return Math.max(score, 1);\n}\n\n// Combine and sort results\nconst combinedResults = [...webResults, ...dbResults]\n  .sort((a, b) => b.relevanceScore - a.relevanceScore)\n  .slice(0, queryData.maxResults || 20);\n\nconsole.log('📈 Final results:', combinedResults.length);\n\n// Build response\nconst finalResult = {\n  success: true,\n  query: queryData.searchQuery,\n  results: combinedResults,\n  metadata: {\n    total: combinedResults.length,\n    webResults: webResults.length,\n    internalResults: dbResults.length,\n    sources: [],\n    timestamp: new Date().toISOString()\n  },\n  debug: {\n    inputsProcessed: allInputs.length,\n    queryFound: !!queryData,\n    finalQuery: queryData.searchQuery.original\n  }\n};\n\n// Add sources\nif (webResults.length > 0) finalResult.metadata.sources.push('web');\nif (dbResults.length > 0) finalResult.metadata.sources.push('internal');\n\nconsole.log('🎯 SUCCESS - Query:', finalResult.query.original);\nconsole.log('🎯 SUCCESS - Results:', finalResult.results.length);\nconsole.log('=== FINAL AGGREGATOR END ===');\n\nreturn finalResult;"
      },
      "id": "final-aggregator",
      "name": "🎯 Smart Results Aggregator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.results.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "results-check",
      "name": "✅ Results Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "success-response",
      "name": "📤 Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// 🚨 No Results Handler with Smart Suggestions\n\nconst originalData = $input.first().json;\nconst query = originalData.query?.original || 'your search';\n\nconst suggestions = {\n  tryBroaderTerms: [\n    'Try simpler terms like \"dress\" or \"shirt\"',\n    'Remove specific colors or styles',\n    'Check spelling of fashion terms'\n  ],\n  popularSearches: [\n    'red dress',\n    'casual shirt',\n    'blue jeans',\n    'summer clothing',\n    'formal wear'\n  ],\n  searchTips: [\n    'Use basic terms like \"dress\", \"shirt\", \"pants\"',\n    'Try different color names',\n    'Search by category: tops, bottoms, dresses'\n  ]\n};\n\nconst response = {\n  success: false,\n  query: originalData.query,\n  results: [],\n  message: `No fashion items found for \"${query}\"`,\n  suggestions: suggestions,\n  metadata: {\n    total: 0,\n    webResults: 0,\n    internalResults: 0,\n    sources: [],\n    timestamp: new Date().toISOString()\n  }\n};\n\nconsole.log('🚨 No results for:', query);\nreturn response;"
      },
      "id": "no-results",
      "name": "🚨 No Results Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 500]
    },
    {
      "parameters": {
        "jsCode": "// 📊 Analytics Logger\n// Track search patterns and performance\n\nconst data = $input.first().json;\n\nconst analytics = {\n  searchId: `search_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  timestamp: new Date().toISOString(),\n  query: data.query?.original || 'unknown',\n  category: data.query?.category || 'general',\n  colors: data.query?.colors || [],\n  resultsCount: data.results?.length || 0,\n  sources: data.metadata?.sources || [],\n  success: data.success || false\n};\n\nconsole.log('📊 Analytics:', JSON.stringify(analytics, null, 2));\n\n// Log interesting patterns\nif (analytics.colors.length > 0) {\n  console.log('🎨 Color search:', analytics.colors.join(', '));\n}\n\nif (analytics.resultsCount === 0) {\n  console.log('⚠️ Zero results for:', analytics.query);\n}\n\nif (analytics.resultsCount > 10) {\n  console.log('🎉 High results for:', analytics.query);\n}\n\n// Return original data (pass-through)\nreturn data;"
      },
      "id": "analytics",
      "name": "📊 Analytics Logger",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 480]
    }
  ],
  "connections": {
    "🎯 Fashion Search Webhook": {
      "main": [
        [
          {
            "node": "🧠 Smart Query Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🧠 Smart Query Processor": {
      "main": [
        [
          {
            "node": "🌐 Web Fashion Search",
            "type": "main",
            "index": 0
          },
          {
            "node": "🗄️ Database Search",
            "type": "main",
            "index": 0
          },
          {
            "node": "🎯 Smart Results Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🌐 Web Fashion Search": {
      "main": [
        [
          {
            "node": "🎯 Smart Results Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🗄️ Database Search": {
      "main": [
        [
          {
            "node": "🎯 Smart Results Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🎯 Smart Results Aggregator": {
      "main": [
        [
          {
            "node": "✅ Results Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "✅ Results Check": {
      "main": [
        [
          {
            "node": "📤 Success Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "📊 Analytics Logger",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "🚨 No Results Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🚨 No Results Handler": {
      "main": [
        [
          {
            "node": "📤 Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "final-fashion-search",
      "name": "Final Fashion Search"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "final-v1"
} 