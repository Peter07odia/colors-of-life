{
  "meta": {
    "instanceId": "colors-of-life-mega-smart-search-v1.0"
  },
  "nodes": [
    {
      "parameters": {
        "path": "smart-search",
        "httpMethod": "POST",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook-trigger",
      "name": "Smart Search Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        100,
        200
      ],
      "notes": "**SMART SEARCH WEBHOOK TRIGGER**\n\nPurpose: Receives search requests from mobile app\n\nSetup Steps:\n1. Path: 'smart-search' (creates /webhook/smart-search endpoint)\n2. Method: POST for receiving search data\n3. Response Mode: 'responseNode' for controlled responses\n4. Raw Body: true for JSON parsing\n\nExpected Input:\n{\n  \"query\": \"red summer dress\",\n  \"userId\": \"user-123\",\n  \"filters\": {\n    \"colors\": [\"red\"],\n    \"categories\": [\"dresses\"],\n    \"priceRange\": { \"min\": 20, \"max\": 100 }\n  },\n  \"searchMode\": \"text|image\",\n  \"limit\": 20\n}\n\nConnections:\n- Success: Query Validator\n- Error: Error Handler"
    },
    {
      "parameters": {
        "language": "javaScript",
        "jsCode": "// **QUERY VALIDATOR AND PROCESSOR**\n// Validates input, extracts search parameters, and prepares for processing\n\nconst inputData = $json.body || $json;\n\n// Validate required fields\nif (!inputData.query || typeof inputData.query !== 'string') {\n  throw new Error('Query is required and must be a string');\n}\n\n// Extract and validate parameters\nconst query = inputData.query.trim();\nconst userId = inputData.userId || 'anonymous';\nconst searchMode = inputData.searchMode || 'text';\nconst limit = Math.min(inputData.limit || 20, 50); // Max 50 results\n\n// Process filters\nconst filters = inputData.filters || {};\nconst colors = Array.isArray(filters.colors) ? filters.colors : [];\nconst categories = Array.isArray(filters.categories) ? filters.categories : [];\nconst brands = Array.isArray(filters.brands) ? filters.brands : [];\nconst priceRange = filters.priceRange || { min: 0, max: 1000 };\n\n// Detect color mentions in query\nconst colorKeywords = ['red', 'blue', 'green', 'yellow', 'orange', 'purple', 'pink', 'black', 'white', 'gray', 'brown', 'beige', 'navy', 'teal', 'coral', 'magenta', 'cyan', 'rose', 'gold', 'silver'];\nconst detectedColors = colorKeywords.filter(color => \n  query.toLowerCase().includes(color.toLowerCase())\n);\n\n// Detect style keywords\nconst styleKeywords = ['casual', 'formal', 'business', 'vintage', 'modern', 'bohemian', 'minimalist', 'streetwear', 'elegant', 'sporty', 'chic', 'trendy'];\nconst detectedStyles = styleKeywords.filter(style => \n  query.toLowerCase().includes(style.toLowerCase())\n);\n\n// Detect category keywords\nconst categoryKeywords = ['dress', 'top', 'shirt', 'pant', 'jeans', 'jacket', 'coat', 'shoe', 'sneaker', 'bag', 'accessory', 'jewelry', 'hat', 'scarf'];\nconst detectedCategories = categoryKeywords.filter(category => \n  query.toLowerCase().includes(category.toLowerCase())\n);\n\n// Generate enhanced query variations\nconst enhancedQueries = [\n  query, // Original query\n  query + ' fashion', // Add fashion context\n  query + ' clothing', // Add clothing context\n  ...detectedColors.map(color => `${color} ${query.replace(color, '').trim()}`), // Color variations\n  ...detectedStyles.map(style => `${style} ${query.replace(style, '').trim()}`) // Style variations\n].filter(q => q.trim().length > 0);\n\n// Create search context\nconst searchContext = {\n  originalQuery: query,\n  enhancedQueries: enhancedQueries,\n  userId: userId,\n  searchMode: searchMode,\n  limit: limit,\n  filters: {\n    colors: [...colors, ...detectedColors],\n    categories: [...categories, ...detectedCategories],\n    brands: brands,\n    priceRange: priceRange,\n    styles: detectedStyles\n  },\n  detectedIntent: {\n    colors: detectedColors,\n    styles: detectedStyles,\n    categories: detectedCategories\n  },\n  timestamp: new Date().toISOString(),\n  requestId: `search-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n};\n\nreturn [{\n  json: searchContext\n}];"
      },
      "id": "query-validator",
      "name": "Query Validator & Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        300,
        200
      ],
      "notes": "**QUERY VALIDATOR AND PROCESSOR**\n\nPurpose: Validates input, extracts search parameters, and prepares for processing\n\nSetup Steps:\n1. Language: JavaScript\n2. Mode: Run Once for All Items\n3. Input: Raw webhook data\n4. Output: Structured search context\n\nProcessing:\n- Validates required fields\n- Extracts search parameters\n- Detects colors, styles, categories in query\n- Generates enhanced query variations\n- Creates search context object\n- Generates unique request ID\n\nOutput:\n- originalQuery: Original search query\n- enhancedQueries: Array of query variations\n- userId: User identifier\n- filters: Processed filters with detected terms\n- detectedIntent: AI-detected search intent\n- timestamp: Request timestamp\n- requestId: Unique request identifier\n\nConnections:\n- Success: Split to parallel search nodes\n- Error: Error Handler"
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "getAll",
        "tableId": "fashion_items",
        "select": "id, name, brand, price, original_price, image_url, description, category, colors, tags, style_attributes, created_at",
        "filterType": "manual",
        "matchType": "anyFilter",
        "filters": {
          "conditions": [
            {
              "keyName": "name",
              "condition": "ilike",
              "keyValue": "={{ '%' + $json.originalQuery + '%' }}"
            },
            {
              "keyName": "description",
              "condition": "ilike",
              "keyValue": "={{ '%' + $json.originalQuery + '%' }}"
            },
            {
              "keyName": "tags",
              "condition": "cs",
              "keyValue": "={{ '{\"' + $json.originalQuery + '\"}' }}"
            }
          ]
        },
        "sort": {
          "sortingProperties": [
            {
              "keyName": "created_at",
              "sortDirection": "desc"
            }
          ]
        },
        "limit": "={{ $json.limit }}"
      },
      "id": "database-search",
      "name": "Database Search",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        500,
        100
      ],
      "notes": "**DATABASE SEARCH**\n\nPurpose: Searches fashion_items table in Supabase database\n\nSetup Steps:\n1. Resource: Row\n2. Operation: Get Many\n3. Table: fashion_items\n4. Select: All relevant fields\n5. Filter: Multiple conditions with OR logic\n6. Sort: By created_at descending\n7. Limit: From search context\n\nSearch Logic:\n- Text search in name, description, tags\n- Uses ILIKE for case-insensitive matching\n- Tags array contains search with @>\n- Results sorted by recency\n- Limit from user request\n\nCredentials Required:\n- Supabase API credentials\n- Database URL and anon key\n\nConnections:\n- Success: Result Combiner\n- Error: Error Handler"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://api.search.brave.com/res/v1/web/search",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Subscription-Token",
              "value": "={{ $credentials.braveSearchApi.token }}"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.originalQuery + ' fashion clothing buy online' }}"
            },
            {
              "name": "count",
              "value": "={{ Math.min($json.limit, 20) }}"
            },
            {
              "name": "search_lang",
              "value": "en"
            },
            {
              "name": "country",
              "value": "US"
            },
            {
              "name": "safesearch",
              "value": "moderate"
            }
          ]
        }
      },
      "id": "web-search",
      "name": "Web Search (Brave)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        500,
        300
      ],
      "notes": "**WEB SEARCH (BRAVE API)**\n\nPurpose: Searches web for fashion items using Brave Search API\n\nSetup Steps:\n1. Method: GET\n2. URL: https://api.search.brave.com/res/v1/web/search\n3. Headers: X-Subscription-Token from credentials\n4. Query: Enhanced fashion search query\n5. Parameters: Count, language, country, safesearch\n\nSearch Enhancement:\n- Adds 'fashion clothing buy online' to query\n- Limits results to specified count\n- US-focused results\n- Moderate safesearch\n- English language\n\nCredentials Required:\n- Brave Search API token\n- Configure in n8n credentials\n\nExpected Output:\n- web.results array with:\n  - title: Page title\n  - url: Page URL\n  - description: Page description\n  - date: Page date\n  - extra_snippets: Additional content\n\nConnections:\n- Success: Result Combiner\n- Error: Error Handler"
    },
    {
      "parameters": {
        "language": "javaScript",
        "jsCode": "// **RESULT COMBINER AND PROCESSOR**\n// Combines database and web search results, normalizes format\n\nconst searchContext = $('Query Validator & Processor').first().json;\nconst dbResults = $('Database Search').all();\nconst webResults = $('Web Search').all();\n\n// Process database results\nconst processedDbResults = dbResults.map(item => {\n  const data = item.json;\n  return {\n    id: `db-${data.id}`,\n    title: data.name,\n    brand: data.brand,\n    price: data.price,\n    originalPrice: data.original_price,\n    image: data.image_url,\n    description: data.description,\n    category: data.category,\n    colors: data.colors || [],\n    tags: data.tags || [],\n    styleAttributes: data.style_attributes || [],\n    source: 'database',\n    relevanceScore: calculateRelevanceScore(data, searchContext),\n    createdAt: data.created_at\n  };\n});\n\n// Process web results\nconst processedWebResults = webResults.length > 0 ? \n  (webResults[0].json.web?.results || []).map(item => {\n    return {\n      id: `web-${item.url.split('/').pop()}`,\n      title: item.title,\n      brand: extractBrandFromUrl(item.url),\n      price: extractPriceFromDescription(item.description),\n      originalPrice: null,\n      image: item.thumbnail?.src || null,\n      description: item.description,\n      category: detectCategoryFromTitle(item.title),\n      colors: detectColorsFromText(item.title + ' ' + item.description),\n      tags: [],\n      styleAttributes: [],\n      source: 'web',\n      url: item.url,\n      relevanceScore: calculateWebRelevanceScore(item, searchContext),\n      createdAt: item.date\n    };\n  }) : [];\n\n// Combine and sort results\nconst allResults = [...processedDbResults, ...processedWebResults];\nconst sortedResults = allResults\n  .sort((a, b) => b.relevanceScore - a.relevanceScore)\n  .slice(0, searchContext.limit);\n\n// Helper functions\nfunction calculateRelevanceScore(item, context) {\n  let score = 0;\n  \n  // Query match in title (high weight)\n  if (item.name.toLowerCase().includes(context.originalQuery.toLowerCase())) {\n    score += 100;\n  }\n  \n  // Color match\n  const itemColors = (item.colors || []).map(c => c.toLowerCase());\n  const searchColors = context.filters.colors.map(c => c.toLowerCase());\n  const colorMatches = itemColors.filter(color => searchColors.includes(color));\n  score += colorMatches.length * 30;\n  \n  // Category match\n  if (context.filters.categories.some(cat => \n    item.category.toLowerCase().includes(cat.toLowerCase())\n  )) {\n    score += 50;\n  }\n  \n  // Style match\n  const itemStyles = (item.style_attributes || []).map(s => s.toLowerCase());\n  const searchStyles = context.detectedIntent.styles.map(s => s.toLowerCase());\n  const styleMatches = itemStyles.filter(style => searchStyles.includes(style));\n  score += styleMatches.length * 25;\n  \n  // Price range match\n  if (item.price >= context.filters.priceRange.min && \n      item.price <= context.filters.priceRange.max) {\n    score += 20;\n  }\n  \n  // Recency bonus (newer items get higher score)\n  const ageInDays = (new Date() - new Date(item.created_at)) / (1000 * 60 * 60 * 24);\n  score += Math.max(0, 30 - ageInDays); // Bonus decreases with age\n  \n  return score;\n}\n\nfunction calculateWebRelevanceScore(item, context) {\n  let score = 0;\n  \n  // Query match in title\n  if (item.title.toLowerCase().includes(context.originalQuery.toLowerCase())) {\n    score += 80;\n  }\n  \n  // Query match in description\n  if (item.description.toLowerCase().includes(context.originalQuery.toLowerCase())) {\n    score += 40;\n  }\n  \n  // Color match\n  const detectedColors = detectColorsFromText(item.title + ' ' + item.description);\n  const colorMatches = detectedColors.filter(color => \n    context.filters.colors.map(c => c.toLowerCase()).includes(color.toLowerCase())\n  );\n  score += colorMatches.length * 25;\n  \n  // E-commerce site bonus\n  const ecommerceSites = ['amazon', 'ebay', 'etsy', 'shopify', 'zalando', 'asos', 'nordstrom'];\n  if (ecommerceSites.some(site => item.url.includes(site))) {\n    score += 30;\n  }\n  \n  return score;\n}\n\nfunction extractBrandFromUrl(url) {\n  const domain = url.split('/')[2];\n  return domain.split('.')[0].charAt(0).toUpperCase() + domain.split('.')[0].slice(1);\n}\n\nfunction extractPriceFromDescription(description) {\n  const priceMatch = description.match(/\\$[0-9]+(?:\\.[0-9]{2})?/);\n  return priceMatch ? priceMatch[0] : null;\n}\n\nfunction detectCategoryFromTitle(title) {\n  const categories = ['dress', 'top', 'shirt', 'pant', 'jean', 'jacket', 'coat', 'shoe', 'bag'];\n  const lowerTitle = title.toLowerCase();\n  return categories.find(cat => lowerTitle.includes(cat)) || 'clothing';\n}\n\nfunction detectColorsFromText(text) {\n  const colors = ['red', 'blue', 'green', 'yellow', 'orange', 'purple', 'pink', 'black', 'white', 'gray', 'brown'];\n  const lowerText = text.toLowerCase();\n  return colors.filter(color => lowerText.includes(color));\n}\n\n// Return combined results with metadata\nreturn [{\n  json: {\n    ...searchContext,\n    results: sortedResults,\n    totalResults: allResults.length,\n    databaseResults: processedDbResults.length,\n    webResults: processedWebResults.length,\n    processingTime: new Date().toISOString()\n  }\n}];"
      },
      "id": "result-combiner",
      "name": "Result Combiner",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        200
      ],
      "notes": "**RESULT COMBINER AND PROCESSOR**\n\nPurpose: Combines database and web search results, normalizes format\n\nSetup Steps:\n1. Language: JavaScript\n2. Mode: Run Once for All Items\n3. Input: Database and web search results\n4. Output: Normalized, ranked results\n\nProcessing:\n- Normalizes database results to common format\n- Extracts data from web search results\n- Calculates relevance scores using:\n  - Query match in title/description\n  - Color/category/style matching\n  - Price range matching\n  - Recency bonus\n  - E-commerce site bonus\n- Combines and sorts by relevance\n- Limits to requested count\n\nRelevance Scoring:\n- Title match: 100 points (DB), 80 points (Web)\n- Color match: 30 points per color (DB), 25 points (Web)\n- Category match: 50 points (DB)\n- Style match: 25 points per style (DB)\n- Price range match: 20 points (DB)\n- Recency bonus: Up to 30 points (DB)\n- E-commerce bonus: 30 points (Web)\n\nConnections:\n- Success: AI Enhancement\n- Error: Error Handler"
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "complete",
        "modelId": "gpt-4",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "You are a fashion AI assistant specializing in analyzing and enhancing search results. Your task is to:\n1. Analyze search results for fashion relevance and quality\n2. Provide personalized recommendations based on user query\n3. Suggest complementary items and styling tips\n4. Rank results by fashion relevance and user intent\n5. Generate search insights and trends\n\nRespond with a JSON object containing:\n- enhancedResults: Array of results with AI insights\n- recommendations: Personalized suggestions\n- stylingTips: Fashion advice\n- trends: Current fashion trends related to query\n- searchInsights: Analysis of search pattern"
            },
            {
              "role": "user",
              "content": "Analyze these fashion search results and provide enhancements:\n\nSearch Query: {{ $json.originalQuery }}\nUser Intent: {{ JSON.stringify($json.detectedIntent) }}\nFilters: {{ JSON.stringify($json.filters) }}\nResults: {{ JSON.stringify($json.results) }}\n\nPlease enhance these results with fashion insights, styling suggestions, and personalized recommendations."
            }
          ]
        },
        "maxTokens": 1000,
        "temperature": 0.7
      },
      "id": "ai-enhancement",
      "name": "AI Enhancement",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.1,
      "position": [
        900,
        200
      ],
      "notes": "**AI ENHANCEMENT**\n\nPurpose: Uses GPT-4 to enhance search results with fashion insights\n\nSetup Steps:\n1. Resource: Chat\n2. Operation: Complete\n3. Model: GPT-4\n4. System prompt: Fashion AI specialist\n5. User prompt: Search data with results\n6. Max tokens: 1000\n7. Temperature: 0.7 (creative but focused)\n\nAI Analysis:\n- Fashion relevance scoring\n- Personalized recommendations\n- Styling tips and advice\n- Current fashion trends\n- Search pattern insights\n- Complementary item suggestions\n\nCredentials Required:\n- OpenAI API key\n- Configure in n8n credentials\n\nExpected Output:\n- enhancedResults: Results with AI insights\n- recommendations: Personalized suggestions\n- stylingTips: Fashion advice\n- trends: Current fashion trends\n- searchInsights: Search pattern analysis\n\nConnections:\n- Success: Analytics Logger\n- Error: Error Handler"
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "create",
        "tableId": "user_search_history",
        "columns": {
          "columnValues": [
            {
              "column": "user_id",
              "value": "={{ $json.userId }}"
            },
            {
              "column": "query",
              "value": "={{ $json.originalQuery }}"
            },
            {
              "column": "enhanced_queries",
              "value": "={{ JSON.stringify($json.enhancedQueries) }}"
            },
            {
              "column": "filters",
              "value": "={{ JSON.stringify($json.filters) }}"
            },
            {
              "column": "detected_intent",
              "value": "={{ JSON.stringify($json.detectedIntent) }}"
            },
            {
              "column": "total_results",
              "value": "={{ $json.totalResults }}"
            },
            {
              "column": "database_results",
              "value": "={{ $json.databaseResults }}"
            },
            {
              "column": "web_results",
              "value": "={{ $json.webResults }}"
            },
            {
              "column": "search_mode",
              "value": "={{ $json.searchMode }}"
            },
            {
              "column": "request_id",
              "value": "={{ $json.requestId }}"
            }
          ]
        }
      },
      "id": "analytics-logger",
      "name": "Analytics Logger",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1100,
        200
      ],
      "notes": "**ANALYTICS LOGGER**\n\nPurpose: Logs search analytics to user_search_history table\n\nSetup Steps:\n1. Resource: Row\n2. Operation: Create\n3. Table: user_search_history\n4. Columns: All search metadata\n\nLogged Data:\n- user_id: User identifier\n- query: Original search query\n- enhanced_queries: AI-generated variations\n- filters: Applied filters\n- detected_intent: AI-detected intent\n- total_results: Total result count\n- database_results: DB result count\n- web_results: Web result count\n- search_mode: Text or image search\n- request_id: Unique request identifier\n- timestamp: Auto-generated\n\nAnalytics Usage:\n- User behavior tracking\n- Search pattern analysis\n- Performance monitoring\n- Personalization improvements\n- A/B testing support\n\nCredentials Required:\n- Supabase API credentials\n- Same as database search\n\nConnections:\n- Success: Response Formatter\n- Error: Error Handler"
    },
    {
      "parameters": {
        "language": "javaScript",
        "jsCode": "// **RESPONSE FORMATTER**\n// Formats final response for mobile app consumption\n\nconst searchData = $('Result Combiner').first().json;\nconst aiEnhancement = $('AI Enhancement').first().json;\n\n// Parse AI enhancement (it's a string response)\nlet aiData = {};\ntry {\n  aiData = JSON.parse(aiEnhancement.choices[0].message.content);\n} catch (e) {\n  console.log('AI enhancement parsing failed:', e);\n  aiData = {\n    enhancedResults: [],\n    recommendations: [],\n    stylingTips: [],\n    trends: [],\n    searchInsights: {}\n  };\n}\n\n// Format results for mobile app\nconst formattedResults = searchData.results.map(item => {\n  // Find AI enhancement for this item\n  const aiEnhancement = aiData.enhancedResults?.find(ai => \n    ai.id === item.id || ai.title === item.title\n  ) || {};\n  \n  return {\n    id: item.id,\n    title: item.title,\n    brand: item.brand,\n    price: item.price,\n    originalPrice: item.originalPrice,\n    image: item.image,\n    description: item.description,\n    category: item.category,\n    colors: item.colors,\n    tags: item.tags,\n    source: item.source,\n    url: item.url,\n    relevanceScore: item.relevanceScore,\n    // AI enhancements\n    aiInsights: aiEnhancement.insights || null,\n    stylingTips: aiEnhancement.stylingTips || [],\n    complementaryItems: aiEnhancement.complementaryItems || [],\n    fashionScore: aiEnhancement.fashionScore || item.relevanceScore,\n    // Mobile app specific\n    isVideo: false,\n    discount: item.originalPrice && item.price ? \n      Math.round((1 - item.price / item.originalPrice) * 100) : null\n  };\n});\n\n// Create mobile app response\nconst response = {\n  success: true,\n  data: {\n    query: searchData.originalQuery,\n    results: formattedResults,\n    totalResults: searchData.totalResults,\n    databaseResults: searchData.databaseResults,\n    webResults: searchData.webResults,\n    searchMode: searchData.searchMode,\n    requestId: searchData.requestId,\n    // AI enhancements\n    recommendations: aiData.recommendations || [],\n    stylingTips: aiData.stylingTips || [],\n    trends: aiData.trends || [],\n    searchInsights: aiData.searchInsights || {},\n    // Metadata\n    filters: searchData.filters,\n    detectedIntent: searchData.detectedIntent,\n    processingTime: new Date().toISOString(),\n    timestamp: searchData.timestamp\n  },\n  meta: {\n    totalResults: formattedResults.length,\n    hasMore: searchData.totalResults > searchData.limit,\n    searchMode: searchData.searchMode,\n    processingTimeMs: Date.now() - new Date(searchData.timestamp).getTime()\n  }\n};\n\nreturn [{ json: response }];"
      },
      "id": "response-formatter",
      "name": "Response Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1300,
        200
      ],
      "notes": "**RESPONSE FORMATTER**\n\nPurpose: Formats final response for mobile app consumption\n\nSetup Steps:\n1. Language: JavaScript\n2. Mode: Run Once for All Items\n3. Input: Combined results and AI enhancement\n4. Output: Mobile app compatible response\n\nFormatting:\n- Combines search results with AI insights\n- Adds mobile-specific fields (isVideo, discount)\n- Structures response for frontend consumption\n- Includes metadata and performance metrics\n- Handles AI enhancement parsing errors\n\nResponse Structure:\n- success: Boolean status\n- data: Main response data\n  - query: Original search query\n  - results: Formatted result array\n  - recommendations: AI suggestions\n  - stylingTips: Fashion advice\n  - trends: Current fashion trends\n  - searchInsights: Search analysis\n- meta: Response metadata\n  - totalResults: Result count\n  - hasMore: Pagination indicator\n  - processingTimeMs: Performance metric\n\nMobile App Fields:\n- isVideo: Video content flag\n- discount: Calculated discount percentage\n- fashionScore: AI-enhanced relevance\n- aiInsights: AI-generated insights\n- complementaryItems: Styling suggestions\n\nConnections:\n- Success: Webhook Response\n- Error: Error Handler"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1500,
        200
      ],
      "notes": "**WEBHOOK RESPONSE**\n\nPurpose: Sends formatted response back to mobile app\n\nSetup Steps:\n1. Respond With: JSON\n2. Response Body: Formatted response object\n3. Status Code: 200 (default)\n4. Headers: application/json (default)\n\nResponse Format:\n{\n  \"success\": true,\n  \"data\": {\n    \"query\": \"red summer dress\",\n    \"results\": [...],\n    \"recommendations\": [...],\n    \"stylingTips\": [...],\n    \"trends\": [...]\n  },\n  \"meta\": {\n    \"totalResults\": 25,\n    \"hasMore\": false,\n    \"processingTimeMs\": 1250\n  }\n}\n\nMobile App Integration:\n- Frontend can directly use response\n- Results ready for VisualResultCard\n- Recommendations for suggestions\n- Styling tips for AI chat\n- Trends for discovery features\n\nStatus Codes:\n- 200: Success\n- 400: Bad request (validation errors)\n- 500: Internal server error\n\nConnections:\n- Final response to webhook caller\n- End of workflow"
    },
    {
      "parameters": {
        "language": "javaScript",
        "jsCode": "// **ERROR HANDLER**\n// Handles errors gracefully and returns appropriate responses\n\nconst error = $json.error || $json;\nconst errorMessage = error.message || 'An unexpected error occurred';\nconst errorCode = error.code || 'UNKNOWN_ERROR';\n\n// Log error details\nconsole.error('Smart Search Error:', {\n  message: errorMessage,\n  code: errorCode,\n  timestamp: new Date().toISOString(),\n  stack: error.stack\n});\n\n// Create error response\nconst errorResponse = {\n  success: false,\n  error: {\n    message: errorMessage,\n    code: errorCode,\n    timestamp: new Date().toISOString()\n  },\n  data: {\n    query: '',\n    results: [],\n    totalResults: 0,\n    recommendations: [],\n    stylingTips: [],\n    trends: []\n  },\n  meta: {\n    totalResults: 0,\n    hasMore: false,\n    processingTimeMs: 0\n  }\n};\n\n// Return error response\nreturn [{ json: errorResponse }];"
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1300,
        400
      ],
      "notes": "**ERROR HANDLER**\n\nPurpose: Handles errors gracefully and returns appropriate responses\n\nSetup Steps:\n1. Language: JavaScript\n2. Mode: Run Once for All Items\n3. Input: Error object from any failed node\n4. Output: Formatted error response\n\nError Handling:\n- Logs error details for debugging\n- Creates consistent error response format\n- Returns empty data structure\n- Maintains API contract with mobile app\n- Prevents workflow crashes\n\nError Response:\n- success: false\n- error: Error details with message, code, timestamp\n- data: Empty data structure matching success format\n- meta: Empty metadata\n\nError Codes:\n- VALIDATION_ERROR: Invalid input data\n- DATABASE_ERROR: Supabase connection issues\n- WEB_SEARCH_ERROR: Brave API issues\n- AI_ERROR: OpenAI API issues\n- UNKNOWN_ERROR: Unexpected errors\n\nConnections:\n- Success: Error Response (via respondToWebhook)\n- Handles all node failures in workflow"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "responseCode": 400
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1500,
        400
      ],
      "notes": "**ERROR RESPONSE**\n\nPurpose: Sends error response back to mobile app\n\nSetup Steps:\n1. Respond With: JSON\n2. Response Body: Error response object\n3. Status Code: 400 (Bad Request)\n4. Headers: application/json (default)\n\nError Response Format:\n{\n  \"success\": false,\n  \"error\": {\n    \"message\": \"Error description\",\n    \"code\": \"ERROR_CODE\",\n    \"timestamp\": \"2024-01-01T12:00:00Z\"\n  },\n  \"data\": { ... empty data structure ... },\n  \"meta\": { ... empty metadata ... }\n}\n\nMobile App Integration:\n- Frontend can handle error gracefully\n- Show user-friendly error messages\n- Maintain UI state consistency\n- Enable retry functionality\n- Log errors for analysis\n\nStatus Codes:\n- 400: Bad request / validation errors\n- 500: Internal server errors\n- 503: Service unavailable\n\nConnections:\n- Final error response to webhook caller\n- End of error handling path"
    }
  ],
  "connections": {
    "Smart Search Webhook": {
      "main": [
        [
          {
            "node": "Query Validator & Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Validator & Processor": {
      "main": [
        [
          {
            "node": "Database Search",
            "type": "main",
            "index": 0
          },
          {
            "node": "Web Search (Brave)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Database Search": {
      "main": [
        [
          {
            "node": "Result Combiner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Web Search (Brave)": {
      "main": [
        [
          {
            "node": "Result Combiner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Result Combiner": {
      "main": [
        [
          {
            "node": "AI Enhancement",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Enhancement": {
      "main": [
        [
          {
            "node": "Analytics Logger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analytics Logger": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Formatter": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
} 