{
  "meta": {
    "instanceId": "colors-of-life-smart-search-mcp"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "smart-search",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "smart-search-webhook",
      "name": "Smart Search Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "smart-search-webhook"
    },
    {
      "parameters": {
        "language": "javaScript",
        "jsCode": "// 🧠 Advanced Query Processor for Fashion Search\n// Processes search queries with color, style, and context detection\n\nconsole.log('=== SMART SEARCH QUERY PROCESSOR START ===');\n\n// Initialize default values\nlet inputData = {};\nlet searchQuery = '';\nlet userId = 'anonymous';\nlet filters = {};\nlet maxResults = 20;\nlet offset = 0;\n\ntry {\n  // Extract input data from webhook\n  const inputs = $input.all();\n  if (inputs.length > 0 && inputs[0] && inputs[0].json) {\n    inputData = inputs[0].json;\n    console.log('✅ Input received:', Object.keys(inputData));\n    \n    // Extract parameters\n    searchQuery = inputData.query || inputData.searchQuery || inputData.q || '';\n    userId = inputData.userId || inputData.user_id || 'anonymous';\n    filters = inputData.filters || {};\n    maxResults = Math.max(1, Math.min(50, parseInt(inputData.limit || inputData.maxResults) || 20));\n    offset = Math.max(0, parseInt(inputData.offset) || 0);\n    \n    console.log('🔍 Extracted params:', {\n      query: searchQuery,\n      userId,\n      maxResults,\n      filters\n    });\n  }\n} catch (error) {\n  console.log('❌ Error processing input:', error.message);\n}\n\n// Advanced query analysis with fashion-specific intelligence\nfunction analyzeQuery(query) {\n  const original = String(query).toLowerCase().trim();\n  \n  // Enhanced color detection\n  const colorMap = {\n    'black': ['black', 'noir', 'dark', 'charcoal', 'ebony', 'jet'],\n    'white': ['white', 'cream', 'ivory', 'off-white', 'pearl', 'snow'],\n    'red': ['red', 'crimson', 'burgundy', 'maroon', 'cherry', 'rose', 'scarlet'],\n    'blue': ['blue', 'navy', 'royal', 'cobalt', 'azure', 'indigo', 'sapphire'],\n    'green': ['green', 'emerald', 'forest', 'olive', 'mint', 'sage', 'lime'],\n    'yellow': ['yellow', 'gold', 'mustard', 'amber', 'lemon', 'sunny'],\n    'purple': ['purple', 'violet', 'lavender', 'plum', 'orchid', 'amethyst'],\n    'pink': ['pink', 'rose', 'blush', 'fuchsia', 'magenta', 'coral'],\n    'orange': ['orange', 'coral', 'peach', 'tangerine', 'apricot', 'rust'],\n    'brown': ['brown', 'tan', 'beige', 'camel', 'coffee', 'chocolate', 'khaki'],\n    'gray': ['gray', 'grey', 'silver', 'charcoal', 'slate', 'ash'],\n    'neutral': ['neutral', 'nude', 'natural', 'beige', 'taupe', 'sand']\n  };\n  \n  let detectedColors = [];\n  for (const [color, variations] of Object.entries(colorMap)) {\n    if (variations.some(variation => original.includes(variation))) {\n      detectedColors.push(color);\n    }\n  }\n  \n  // Category detection with fashion-specific terms\n  let category = 'general';\n  const categoryMap = {\n    'dresses': ['dress', 'gown', 'frock', 'sundress', 'maxi', 'midi', 'mini', 'cocktail'],\n    'tops': ['shirt', 'top', 'blouse', 'tee', 't-shirt', 'tank', 'camisole', 'sweater', 'cardigan', 'hoodie'],\n    'bottoms': ['pants', 'jeans', 'trouser', 'shorts', 'skirt', 'leggings', 'joggers', 'chinos'],\n    'shoes': ['shoe', 'boot', 'sneaker', 'sandal', 'heel', 'flat', 'loafer', 'pump', 'oxford'],\n    'outerwear': ['jacket', 'coat', 'blazer', 'vest', 'parka', 'trench', 'bomber'],\n    'accessories': ['bag', 'purse', 'wallet', 'belt', 'hat', 'scarf', 'jewelry', 'watch', 'sunglasses']\n  };\n  \n  for (const [cat, keywords] of Object.entries(categoryMap)) {\n    if (keywords.some(keyword => original.includes(keyword))) {\n      category = cat;\n      break;\n    }\n  }\n  \n  // Style and occasion detection\n  let style = 'general';\n  const styleMap = {\n    'casual': ['casual', 'relaxed', 'everyday', 'comfortable', 'laid-back'],\n    'formal': ['formal', 'business', 'professional', 'office', 'work', 'corporate'],\n    'party': ['party', 'evening', 'cocktail', 'night out', 'celebration', 'festive'],\n    'summer': ['summer', 'beach', 'vacation', 'light', 'breathable', 'sunny'],\n    'winter': ['winter', 'warm', 'cozy', 'thermal', 'layering', 'cold'],\n    'vintage': ['vintage', 'retro', 'classic', 'timeless', 'traditional', 'old-school'],\n    'modern': ['modern', 'contemporary', 'trendy', 'current', 'fashionable', 'latest'],\n    'bohemian': ['boho', 'bohemian', 'free-spirited', 'artsy', 'eclectic', 'hippie'],\n    'athletic': ['athletic', 'sporty', 'gym', 'workout', 'fitness', 'active']\n  };\n  \n  for (const [styleType, keywords] of Object.entries(styleMap)) {\n    if (keywords.some(keyword => original.includes(keyword))) {\n      style = styleType;\n      break;\n    }\n  }\n  \n  // Price range detection\n  let priceRange = null;\n  if (original.includes('cheap') || original.includes('budget') || original.includes('affordable')) {\n    priceRange = { min: 0, max: 50 };\n  } else if (original.includes('expensive') || original.includes('luxury') || original.includes('premium')) {\n    priceRange = { min: 200, max: 1000 };\n  } else if (original.includes('mid-range') || original.includes('moderate')) {\n    priceRange = { min: 50, max: 200 };\n  }\n  \n  // Create enhanced search terms\n  const enhancedTerms = [original];\n  if (detectedColors.length > 0) enhancedTerms.push(...detectedColors);\n  if (category !== 'general') enhancedTerms.push(category);\n  if (style !== 'general') enhancedTerms.push(style);\n  \n  // Add general fashion terms\n  enhancedTerms.push('fashion', 'clothing', 'style', 'outfit');\n  \n  return {\n    original: query.trim(),\n    expanded: [...new Set(enhancedTerms)].join(' '),\n    colors: detectedColors,\n    category: category,\n    style: style,\n    priceRange: priceRange,\n    searchTerms: enhancedTerms,\n    intent: determineSearchIntent(original)\n  };\n}\n\n// Determine user search intent\nfunction determineSearchIntent(query) {\n  if (query.includes('similar') || query.includes('like this')) return 'similar';\n  if (query.includes('outfit') || query.includes('look')) return 'complete_outfit';\n  if (query.includes('match') || query.includes('goes with')) return 'coordination';\n  if (query.includes('trend') || query.includes('popular')) return 'trending';\n  if (query.includes('occasion') || query.includes('event')) return 'occasion_based';\n  return 'general_search';\n}\n\n// Process the query\nconst queryAnalysis = analyzeQuery(searchQuery);\n\n// Merge with provided filters\nconst allColors = [...new Set([...queryAnalysis.colors, ...(filters.colors || [])])];\nconst finalPriceRange = filters.priceRange || queryAnalysis.priceRange;\n\n// Build comprehensive search data\nconst result = {\n  userId: userId,\n  searchQuery: {\n    ...queryAnalysis,\n    colors: allColors\n  },\n  filters: {\n    ...filters,\n    colors: allColors,\n    categories: filters.categories || [queryAnalysis.category].filter(c => c !== 'general'),\n    priceRange: finalPriceRange,\n    source: filters.source || 'all'\n  },\n  maxResults: maxResults,\n  offset: offset,\n  timestamp: new Date().toISOString(),\n  searchId: `search_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  debug: {\n    originalInput: inputData,\n    detectedColors: queryAnalysis.colors,\n    detectedCategory: queryAnalysis.category,\n    detectedStyle: queryAnalysis.style,\n    searchIntent: queryAnalysis.intent,\n    enhancedQuery: queryAnalysis.expanded\n  }\n};\n\nconsole.log('🎯 Final processed data:', JSON.stringify(result, null, 2));\nconsole.log('=== SMART SEARCH QUERY PROCESSOR END ===');\n\nreturn result;"
      },
      "id": "query-processor",
      "name": "Query Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  fi.id,\n  fi.name,\n  fi.description,\n  fi.price,\n  fi.original_price,\n  fi.images,\n  fi.colors,\n  fi.sizes,\n  fi.tags,\n  fi.style_attributes,\n  fi.materials,\n  fi.product_code,\n  fi.popularity_score,\n  fi.discount_percentage,\n  fi.is_featured,\n  b.name as brand_name,\n  b.logo_url as brand_logo,\n  c.name as category_name,\n  c.icon_name as category_icon\nFROM fashion_items fi\nLEFT JOIN brands b ON fi.brand_id = b.id\nLEFT JOIN categories c ON fi.category_id = c.id\nWHERE fi.is_active = true\n{% if $json.searchQuery.original !== '' %}\n  AND (\n    fi.name ILIKE '%{{ $json.searchQuery.original }}%'\n    OR fi.description ILIKE '%{{ $json.searchQuery.original }}%'\n    OR fi.tags::text ILIKE '%{{ $json.searchQuery.original }}%'\n    OR b.name ILIKE '%{{ $json.searchQuery.original }}%'\n    OR c.name ILIKE '%{{ $json.searchQuery.original }}%'\n  )\n{% endif %}\n{% if $json.searchQuery.colors.length > 0 %}\n  AND fi.colors && ARRAY[{% for color in $json.searchQuery.colors %}'{{ color }}'{% if not loop.last %},{% endif %}{% endfor %}]\n{% endif %}\n{% if $json.filters.categories.length > 0 %}\n  AND c.name = ANY(ARRAY[{% for category in $json.filters.categories %}'{{ category }}'{% if not loop.last %},{% endif %}{% endfor %}])\n{% endif %}\n{% if $json.filters.priceRange %}\n  AND fi.price >= {{ $json.filters.priceRange.min }}\n  AND fi.price <= {{ $json.filters.priceRange.max }}\n{% endif %}\nORDER BY \n  CASE \n    WHEN fi.is_featured = true THEN 1\n    WHEN fi.name ILIKE '%{{ $json.searchQuery.original }}%' THEN 2\n    WHEN fi.description ILIKE '%{{ $json.searchQuery.original }}%' THEN 3\n    WHEN fi.tags::text ILIKE '%{{ $json.searchQuery.original }}%' THEN 4\n    ELSE 5\n  END,\n  fi.popularity_score DESC,\n  fi.created_at DESC\nLIMIT {{ $json.maxResults }}\nOFFSET {{ $json.offset || 0 }};"
      },
      "id": "database-search",
      "name": "Database Search",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [680, 200],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://api.bing.microsoft.com/v7.0/search",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Ocp-Apim-Subscription-Key",
              "value": "={{ $vars.BING_SEARCH_API_KEY }}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.searchQuery.expanded }} fashion shop buy"
            },
            {
              "name": "count",
              "value": "={{ Math.min($json.maxResults, 15) }}"
            },
            {
              "name": "offset",
              "value": "={{ $json.offset || 0 }}"
            },
            {
              "name": "mkt",
              "value": "en-US"
            },
            {
              "name": "safesearch",
              "value": "moderate"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "web-search",
      "name": "Web Search",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 400]
    },
    {
      "parameters": {
        "language": "javaScript",
        "jsCode": "// 🎯 Smart Results Aggregator and Ranking Engine\n// Combines database and web results with intelligent ranking\n\nconsole.log('=== SMART RESULTS AGGREGATOR START ===');\n\nconst allInputs = $input.all();\nconsole.log('📊 Total inputs:', allInputs.length);\n\n// Initialize containers\nlet queryData = null;\nlet dbResults = [];\nlet webResults = [];\n\n// Process all inputs\nallInputs.forEach((input, index) => {\n  const data = input.json;\n  console.log(`Input ${index}:`, data ? Object.keys(data) : 'null');\n  \n  // Query processor data\n  if (data && data.searchQuery && data.userId) {\n    queryData = data;\n    console.log('✅ Query data found:', data.searchQuery.original);\n  }\n  \n  // Database results (array of fashion items)\n  else if (Array.isArray(data)) {\n    console.log('🗄️ Database results:', data.length);\n    dbResults = data.map((item, idx) => {\n      const images = parseImages(item.images);\n      const discount = item.discount_percentage || \n        (item.original_price && item.price ? \n          Math.round(((item.original_price - item.price) / item.original_price) * 100) : 0);\n      \n      return {\n        id: item.id || `db_${idx}`,\n        title: item.name || 'Fashion Item',\n        description: item.description || '',\n        image: images,\n        price: item.price ? `$${item.price}` : null,\n        originalPrice: item.original_price ? `$${item.original_price}` : null,\n        brand: item.brand_name || 'Unknown Brand',\n        category: item.category_name || 'Fashion',\n        colors: item.colors || [],\n        sizes: item.sizes || [],\n        tags: item.tags || [],\n        materials: item.materials || [],\n        productCode: item.product_code,\n        styleAttributes: item.style_attributes || {},\n        source: 'database',\n        type: 'fashion_item',\n        relevanceScore: calculateDbRelevance(item, queryData?.searchQuery),\n        discount: discount,\n        isVideo: false,\n        popularityScore: item.popularity_score || 0,\n        isFeatured: item.is_featured || false\n      };\n    });\n  }\n  \n  // Web search results from Bing\n  else if (data && data.webPages && data.webPages.value) {\n    console.log('🌐 Web results:', data.webPages.value.length);\n    webResults = data.webPages.value.map((item, idx) => {\n      const title = item.name || 'Fashion Item';\n      const description = item.snippet || '';\n      const url = item.url || '';\n      \n      // Extract potential price from title or description\n      const priceMatch = (title + ' ' + description).match(/\\$([0-9]+(?:\\.[0-9]{2})?)/i);\n      const price = priceMatch ? `$${priceMatch[1]}` : null;\n      \n      // Try to extract brand from URL or title\n      const brandMatch = url.match(/\\/\\/(?:www\\.)?(\\w+)\\./i);\n      const brand = brandMatch ? brandMatch[1].charAt(0).toUpperCase() + brandMatch[1].slice(1) : 'Online Store';\n      \n      return {\n        id: `web_${idx}`,\n        title: title,\n        description: description,\n        price: price,\n        brand: brand,\n        image: null, // Web results typically don't have direct image URLs\n        url: url,\n        source: 'web',\n        type: 'web_result',\n        relevanceScore: calculateWebRelevance(item, queryData?.searchQuery),\n        isVideo: false,\n        category: 'Fashion'\n      };\n    });\n  }\n});\n\n// Fallback query data\nif (!queryData) {\n  console.log('⚠️ Using fallback query data');\n  queryData = {\n    searchQuery: { original: 'fashion', expanded: 'fashion clothing', category: 'general', colors: [] },\n    userId: 'anonymous',\n    maxResults: 20,\n    searchId: `fallback_${Date.now()}`\n  };\n}\n\n// Helper functions\nfunction parseImages(images) {\n  if (!images) return null;\n  if (typeof images === 'string') {\n    try {\n      const parsed = JSON.parse(images);\n      return Array.isArray(parsed) ? parsed[0] : parsed;\n    } catch { return images; }\n  }\n  return Array.isArray(images) ? images[0] : images;\n}\n\nfunction calculateDbRelevance(item, searchQuery) {\n  if (!searchQuery) return 50;\n  \n  const query = searchQuery.original.toLowerCase();\n  const title = (item.name || '').toLowerCase();\n  const description = (item.description || '').toLowerCase();\n  const tags = (item.tags || []).join(' ').toLowerCase();\n  const brand = (item.brand_name || '').toLowerCase();\n  \n  let score = 0;\n  \n  // Exact matches (higher weight for database items)\n  if (title.includes(query)) score += 50;\n  if (description.includes(query)) score += 30;\n  if (tags.includes(query)) score += 25;\n  if (brand.includes(query)) score += 20;\n  \n  // Color matching (exact match since we have structured data)\n  if (searchQuery.colors && searchQuery.colors.length > 0) {\n    const itemColors = item.colors || [];\n    const colorMatches = searchQuery.colors.filter(color => \n      itemColors.some(itemColor => itemColor.toLowerCase().includes(color.toLowerCase()))\n    );\n    score += colorMatches.length * 30;\n  }\n  \n  // Category matching\n  if (searchQuery.category && searchQuery.category !== 'general') {\n    if (item.category_name && item.category_name.toLowerCase().includes(searchQuery.category)) {\n      score += 25;\n    }\n  }\n  \n  // Style matching\n  if (searchQuery.style && searchQuery.style !== 'general') {\n    const styleAttrs = item.style_attributes || {};\n    if (Object.values(styleAttrs).some(attr => \n      String(attr).toLowerCase().includes(searchQuery.style)\n    )) {\n      score += 20;\n    }\n  }\n  \n  // Quality indicators\n  if (item.is_featured) score += 15;\n  if (item.popularity_score > 0) score += item.popularity_score * 0.1;\n  if (item.discount_percentage > 0) score += 5;\n  if (item.images) score += 3;\n  \n  // Database item bonus (we trust our own data more)\n  score += 10;\n  \n  return Math.max(score, 1);\n}\n\nfunction calculateWebRelevance(item, searchQuery) {\n  if (!searchQuery) return 25;\n  \n  const query = searchQuery.original.toLowerCase();\n  const title = (item.name || '').toLowerCase();\n  const description = (item.snippet || '').toLowerCase();\n  \n  let score = 0;\n  \n  // Exact matches\n  if (title.includes(query)) score += 40;\n  if (description.includes(query)) score += 20;\n  \n  // Color matching\n  if (searchQuery.colors && searchQuery.colors.length > 0) {\n    searchQuery.colors.forEach(color => {\n      if (title.includes(color) || description.includes(color)) {\n        score += 25;\n      }\n    });\n  }\n  \n  // Category matching\n  if (searchQuery.category && searchQuery.category !== 'general') {\n    if (title.includes(searchQuery.category) || description.includes(searchQuery.category)) {\n      score += 20;\n    }\n  }\n  \n  // Word matching\n  const queryWords = query.split(' ').filter(w => w.length > 2);\n  queryWords.forEach(word => {\n    if (title.includes(word)) score += 10;\n    if (description.includes(word)) score += 5;\n  });\n  \n  // Fashion-specific bonus\n  const fashionTerms = ['fashion', 'style', 'clothing', 'apparel', 'outfit', 'wear', 'shop', 'store'];\n  fashionTerms.forEach(term => {\n    if (title.includes(term) || description.includes(term)) {\n      score += 3;\n    }\n  });\n  \n  return Math.max(score, 1);\n}\n\n// Combine and rank results intelligently\nlet combinedResults = [...dbResults, ...webResults];\n\n// Apply search intent-based adjustments\nif (queryData.searchQuery.intent === 'trending') {\n  // Boost popular and featured items\n  combinedResults = combinedResults.map(item => ({\n    ...item,\n    relevanceScore: item.relevanceScore + (item.popularityScore || 0) * 0.2 + (item.isFeatured ? 10 : 0)\n  }));\n} else if (queryData.searchQuery.intent === 'similar') {\n  // Boost items with similar attributes\n  combinedResults = combinedResults.map(item => ({\n    ...item,\n    relevanceScore: item.relevanceScore + (item.colors?.length || 0) * 2\n  }));\n}\n\n// Sort by relevance score\ncombinedResults.sort((a, b) => b.relevanceScore - a.relevanceScore);\n\n// Limit results and ensure diversity\ncombinedResults = combinedResults.slice(0, queryData.maxResults || 20);\n\n// Log search analytics\nconst searchAnalytics = {\n  searchId: queryData.searchId,\n  userId: queryData.userId,\n  query: queryData.searchQuery.original,\n  intent: queryData.searchQuery.intent,\n  colors: queryData.searchQuery.colors,\n  category: queryData.searchQuery.category,\n  style: queryData.searchQuery.style,\n  resultsCount: combinedResults.length,\n  dbResultsCount: dbResults.length,\n  webResultsCount: webResults.length,\n  topRelevanceScore: combinedResults[0]?.relevanceScore || 0,\n  timestamp: new Date().toISOString()\n};\n\nconsole.log('📊 Search Analytics:', searchAnalytics);\nconsole.log('📈 Final results:', combinedResults.length);\nconsole.log('🏆 Top 3 results:', combinedResults.slice(0, 3).map(r => ({ \n  title: r.title, \n  score: r.relevanceScore, \n  source: r.source \n})));\n\n// Build comprehensive response\nconst finalResult = {\n  success: true,\n  query: queryData.searchQuery,\n  results: combinedResults,\n  metadata: {\n    total: combinedResults.length,\n    dbResults: dbResults.length,\n    webResults: webResults.length,\n    sources: [],\n    searchId: queryData.searchId,\n    timestamp: new Date().toISOString(),\n    filters: queryData.filters || {},\n    analytics: searchAnalytics\n  },\n  debug: {\n    inputsProcessed: allInputs.length,\n    queryFound: !!queryData,\n    searchIntent: queryData.searchQuery.intent,\n    enhancedQuery: queryData.searchQuery.expanded,\n    topScores: combinedResults.slice(0, 5).map(r => r.relevanceScore)\n  }\n};\n\n// Add sources\nif (dbResults.length > 0) finalResult.metadata.sources.push('database');\nif (webResults.length > 0) finalResult.metadata.sources.push('web');\n\nconsole.log('🎯 SUCCESS - Query:', finalResult.query.original);\nconsole.log('🎯 SUCCESS - Results:', finalResult.results.length);\nconsole.log('🎯 SUCCESS - Sources:', finalResult.metadata.sources);\nconsole.log('=== SMART RESULTS AGGREGATOR END ===');\n\nreturn finalResult;"
      },
      "id": "results-aggregator",
      "name": "Results Aggregator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "tableId": "user_search_history",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ $json.metadata.analytics.userId }}",
            "search_query": "={{ $json.metadata.analytics.query }}",
            "search_type": "text",
            "search_filters": "={{ JSON.stringify($json.metadata.filters) }}",
            "results_count": "={{ $json.metadata.total }}",
            "clicked_items": "[]"
          }
        },
        "options": {}
      },
      "id": "log-search",
      "name": "Log Search",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1120, 200],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, PUT, DELETE, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              }
            ]
          }
        }
      },
      "id": "respond-to-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [1340, 300]
    }
  ],
  "connections": {
    "Smart Search Webhook": {
      "main": [
        [
          {
            "node": "Query Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Processor": {
      "main": [
        [
          {
            "node": "Database Search",
            "type": "main",
            "index": 0
          },
          {
            "node": "Web Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Database Search": {
      "main": [
        [
          {
            "node": "Results Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Web Search": {
      "main": [
        [
          {
            "node": "Results Aggregator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Results Aggregator": {
      "main": [
        [
          {
            "node": "Log Search",
            "type": "main",
            "index": 0
          },
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Search": {
      "main": [
        []
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-15T12:00:00.000Z",
      "updatedAt": "2024-01-15T12:00:00.000Z",
      "id": "smart-search-mcp",
      "name": "Smart Search MCP"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T12:00:00.000Z",
  "versionId": "smart-search-mcp-v1"
}