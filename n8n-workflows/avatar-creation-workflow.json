{
  "meta": {
    "instanceId": "colorsoflife-final"
  },
  "name": "üéØ FINAL Avatar Creation - Production Ready",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "avatar-creation",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "6fa757a0-8b66-4b95-a1b1-0b910ebb8bf5",
      "name": "Avatar Creation Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "avatar-creation",
      "notes": "üìã PRODUCTION WEBHOOK: Receives POST from Supabase Edge Function with {avatarId, userId, originalImageUrl, processingSettings}"
    },
    {
      "parameters": {
        "jsCode": "// üìã PRODUCTION INPUT VALIDATOR\n// Validates Supabase Edge Function payload and prepares data structure\nconst inputData = $input.first().json;\nconst requestData = inputData.body || inputData;\n\nconst avatarId = requestData.avatarId;\nconst userId = requestData.userId;\nconst originalImageUrl = requestData.originalImageUrl;\nconst processingSettings = requestData.processingSettings || {};\n\nif (!avatarId || !userId || !originalImageUrl) {\n  throw new Error('Missing required fields: avatarId, userId, originalImageUrl');\n}\n\nconsole.log('‚úÖ Input validation passed');\nconsole.log('Avatar ID:', avatarId);\nconsole.log('User ID:', userId);\nconsole.log('Image URL:', originalImageUrl);\n\nreturn {\n  avatarId: avatarId,\n  userId: userId,\n  imageData: originalImageUrl,\n  processingSettings: processingSettings,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "1ca7dd3d-3452-4f22-975f-fe7ffd9853d3",
      "name": "Input Validator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "notes": "üìã PRODUCTION: Validates inputs and prepares data structure"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://fal.run/fal-ai/birefnet",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Key {{ $credentials.falAiApi.token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "image_url",
              "value": "={{ $json.imageData }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f397fe58-2e1c-4904-955c-550da121538e",
      "name": "fal.ai - Background Removal",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "euNrl93DdMoiaTaF",
          "name": "falAiApi"
        }
      },
      "notes": "üìã PRODUCTION: Background removal using fal.ai imageutils/rembg"
    },
    {
      "parameters": {
        "jsCode": "// üìã PRODUCTION BACKGROUND REMOVAL PROCESSOR\n// Handles fal.ai imageutils/rembg response with proper queue handling\nconst falResponse = $input.first().json;\nconst inputData = $('Input Validator').first().json;\n\nconsole.log('üñºÔ∏è Background Removal Response:', JSON.stringify(falResponse, null, 2));\n\n// Handle queue status\nif (falResponse.status === 'IN_QUEUE') {\n  throw new Error(`‚è≥ Request queued. Position: ${falResponse.queue_position}. Retry in 5 seconds.`);\n}\n\nif (falResponse.status === 'IN_PROGRESS') {\n  throw new Error(`‚öôÔ∏è Processing in progress. Retry in 10 seconds.`);\n}\n\nif (falResponse.status === 'FAILED') {\n  throw new Error(`‚ùå Background removal failed: ${JSON.stringify(falResponse.error || 'Unknown error')}`);\n}\n\n// Extract image URL from completed response\nlet backgroundRemovedUrl = null;\n\nif (falResponse.images && falResponse.images.length > 0 && falResponse.images[0].url) {\n  backgroundRemovedUrl = falResponse.images[0].url;\n} else if (falResponse.image_url) {\n  // Handle both string and object formats from fal.ai\n  backgroundRemovedUrl = typeof falResponse.image_url === 'string' ? falResponse.image_url : falResponse.image_url.url;\n} else if (falResponse.image) {\n  // Handle both string and object formats from fal.ai\n  backgroundRemovedUrl = typeof falResponse.image === 'string' ? falResponse.image : falResponse.image.url;\n} else if (falResponse.data && falResponse.data.image_url) {\n  backgroundRemovedUrl = falResponse.data.image_url;\n} else if (falResponse.url) {\n  backgroundRemovedUrl = falResponse.url;\n}\n\nif (!backgroundRemovedUrl) {\n  throw new Error('‚ùå No image URL found in background removal response: ' + JSON.stringify(falResponse));\n}\n\n// Generate optimized avatar prompt for virtual fashion model\nconst avatarPrompt = 'Transform this person into a perfect virtual fashion model: maintain exact body proportions, preserve natural physique and height, keep authentic facial features and skin tone, create a clean neutral pose suitable for clothing try-on, professional fashion model lighting, clean white background, full body visible, natural standing position, arms slightly away from body, perfect for virtual garment fitting, photorealistic quality, maintain original body structure and measurements, change outfit to fitted base clothing suitable for try-on';\n\n// Ensure we have a clean URL string (not an object)\nif (typeof backgroundRemovedUrl !== 'string') {\n  throw new Error('‚ùå Background removed URL is not a string: ' + typeof backgroundRemovedUrl);\n}\n\n// Validate URL format\nif (!backgroundRemovedUrl.startsWith('http')) {\n  throw new Error('‚ùå Invalid background removed URL format: ' + backgroundRemovedUrl);\n}\n\nconsole.log('‚úÖ Background removal completed');\nconsole.log('üîó Background removed URL:', backgroundRemovedUrl);\nconsole.log('üîç URL type validation:', typeof backgroundRemovedUrl);\n\nreturn {\n  json: {\n    backgroundRemovedUrl: backgroundRemovedUrl,\n    avatarPrompt: avatarPrompt,\n    originalImageUrl: inputData.imageData,\n    userId: inputData.userId,\n    avatarId: inputData.avatarId,\n    timestamp: inputData.timestamp,\n    metadata: {\n      backgroundRemovalModel: 'fal-ai/imageutils/rembg',\n      processedAt: new Date().toISOString(),\n      requestId: falResponse.request_id,\n      originalResponse: falResponse\n    }\n  }\n};"
      },
      "id": "1cb245bc-e208-4853-b93a-fe5b69481e84",
      "name": "Process Background Removal",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300],
      "notes": "üìã PRODUCTION: Processes background removal with queue handling"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://queue.fal.run/fal-ai/flux-pro/kontext",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Key {{ $credentials.falAI.apiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "prompt",
              "value": "={{ $json.avatarPrompt }}"
            },
            {
              "name": "image_url",
              "value": "={{ $json.backgroundRemovedUrl }}"
            },
            {
              "name": "guidance_scale",
              "value": 3.5
            },
            {
              "name": "num_inference_steps",
              "value": 28
            },
            {
              "name": "seed",
              "value": -1
            },
            {
              "name": "safety_tolerance",
              "value": 2
            },
            {
              "name": "image_size",
              "value": "portrait_4_3"
            }
          ]
        },
        "options": {}
      },
      "id": "e5455339-0c21-4748-9feb-de322a7c01a3",
      "name": "fal.ai - Flux Avatar Generation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "euNrl93DdMoiaTaF",
          "name": "falAiApi"
        }
      },
      "notes": "üìã PRODUCTION: Avatar generation using Flux Kontext with queue endpoint"
    },
    {
      "parameters": {
        "jsCode": "// üìã PRODUCTION FLUX AVATAR PROCESSOR WITH INTELLIGENT POLLING\n// Handles Flux Kontext queue response and polls for completion\nconst fluxResponse = $input.first().json;\nconst inputData = $('Process Background Removal').first().json;\n\nconsole.log('üé® Flux Avatar Response:', JSON.stringify(fluxResponse, null, 2));\n\n// Handle queue responses with intelligent polling\nif (fluxResponse.status === 'IN_QUEUE' || fluxResponse.status === 'IN_PROGRESS') {\n  const requestId = fluxResponse.request_id;\n  const statusUrl = fluxResponse.status_url;\n  console.log('‚è≥ Flux request queued/processing. Request ID:', requestId);\n  \n  // Poll the status URL until completion\n  let attempts = 0;\n  const maxAttempts = 60; // 10 minutes max\n  \n  while (attempts < maxAttempts) {\n    attempts++;\n    console.log(`üîÑ Polling attempt ${attempts}/${maxAttempts}`);\n    \n    try {\n      const statusResponse = await $http.request({\n        method: 'GET',\n        url: statusUrl,\n        headers: {\n          'Authorization': 'Key ' + $credentials.falAiApi.token\n        }\n      });\n      \n      const status = statusResponse.data;\n      console.log(`üìä Status: ${status.status}`);\n      \n      if (status.status === 'COMPLETED') {\n        // Extract the final result\n        let avatarGeneratedUrl = null;\n        \n        if (status.images && status.images.length > 0 && status.images[0].url) {\n          avatarGeneratedUrl = status.images[0].url;\n        } else if (status.image_url) {\n          avatarGeneratedUrl = status.image_url;\n        } else if (status.image) {\n          avatarGeneratedUrl = status.image;\n        } else if (status.data && status.data.images && status.data.images[0]) {\n          avatarGeneratedUrl = status.data.images[0].url || status.data.images[0];\n        } else if (status.url) {\n          avatarGeneratedUrl = status.url;\n        }\n        \n        if (!avatarGeneratedUrl) {\n          throw new Error('‚ùå No avatar URL found in completed response: ' + JSON.stringify(status));\n        }\n        \n        console.log('‚úÖ Avatar generation completed');\n        console.log('üîó Avatar URL:', avatarGeneratedUrl);\n        \n        return {\n          json: {\n            avatarGeneratedUrl: avatarGeneratedUrl,\n            backgroundRemovedUrl: inputData.backgroundRemovedUrl,\n            originalImageUrl: inputData.originalImageUrl,\n            avatarPrompt: inputData.avatarPrompt,\n            userId: inputData.userId,\n            avatarId: inputData.avatarId,\n            timestamp: inputData.timestamp,\n            metadata: {\n              avatarGenerationModel: 'fal-ai/flux-pro/kontext',\n              processedAt: new Date().toISOString(),\n              requestId: status.request_id,\n              originalResponse: status,\n              previousMetadata: inputData.metadata\n            }\n          }\n        };\n        \n      } else if (status.status === 'FAILED') {\n        throw new Error(`‚ùå Avatar generation failed: ${JSON.stringify(status.error || 'Unknown error')}`);\n      } else {\n        // Still processing, wait before next attempt\n        const waitTime = Math.min(5000 + (attempts * 1000), 15000); // 5-15 seconds\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n      }\n    } catch (error) {\n      console.error(`‚ùå Polling error on attempt ${attempts}:`, error.message);\n      if (attempts >= maxAttempts) {\n        throw new Error(`‚è∞ Avatar generation timeout after ${maxAttempts} attempts: ${error.message}`);\n      }\n      await new Promise(resolve => setTimeout(resolve, 5000));\n    }\n  }\n  \n  throw new Error(`‚è∞ Avatar generation timeout after ${maxAttempts} attempts`);\n}\n\n// Handle direct completion (non-queue response)\nif (fluxResponse.status === 'COMPLETED' || !fluxResponse.status) {\n  let avatarGeneratedUrl = null;\n  \n  if (fluxResponse.images && fluxResponse.images.length > 0 && fluxResponse.images[0].url) {\n    avatarGeneratedUrl = fluxResponse.images[0].url;\n  } else if (fluxResponse.image_url) {\n    avatarGeneratedUrl = fluxResponse.image_url;\n  } else if (fluxResponse.image) {\n    avatarGeneratedUrl = fluxResponse.image;\n  } else if (fluxResponse.data && fluxResponse.data.images && fluxResponse.data.images[0]) {\n    avatarGeneratedUrl = fluxResponse.data.images[0].url || fluxResponse.data.images[0];\n  } else if (fluxResponse.url) {\n    avatarGeneratedUrl = fluxResponse.url;\n  }\n  \n  if (!avatarGeneratedUrl) {\n    throw new Error('‚ùå No avatar URL found in response: ' + JSON.stringify(fluxResponse));\n  }\n  \n  console.log('‚úÖ Avatar generation completed (direct)');\n  console.log('üîó Avatar URL:', avatarGeneratedUrl);\n  \n  return {\n    json: {\n      avatarGeneratedUrl: avatarGeneratedUrl,\n      backgroundRemovedUrl: inputData.backgroundRemovedUrl,\n      originalImageUrl: inputData.originalImageUrl,\n      avatarPrompt: inputData.avatarPrompt,\n      userId: inputData.userId,\n      avatarId: inputData.avatarId,\n      timestamp: inputData.timestamp,\n      metadata: {\n        avatarGenerationModel: 'fal-ai/flux-pro/kontext',\n        processedAt: new Date().toISOString(),\n        requestId: fluxResponse.request_id,\n        originalResponse: fluxResponse,\n        previousMetadata: inputData.metadata\n      }\n    }\n  };\n}\n\n// Handle failed status\nif (fluxResponse.status === 'FAILED') {\n  throw new Error(`‚ùå Avatar generation failed: ${JSON.stringify(fluxResponse.error || 'Unknown error')}`);\n}\n\n// Unknown status\nthrow new Error(`‚ùì Unknown response status: ${fluxResponse.status}`);"
      },
      "id": "9c41792c-0508-49d7-aa65-c31680c43f0e",
      "name": "Process Avatar Generation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300],
      "notes": "üìã PRODUCTION: Handles Flux queue response with intelligent polling"
    },
    {
      "parameters": {
        "url": "https://fal.run/fal-ai/clarity-upscaler",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Key {{ $credentials.falAiApi.token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "image_url",
              "value": "={{ $json.avatarGeneratedUrl }}"
            },
            {
              "name": "scale_factor",
              "value": 2
            },
            {
              "name": "dynamic_cfg_scale",
              "value": true
            },
            {
              "name": "creativity",
              "value": 0.35
            },
            {
              "name": "resemblance",
              "value": 0.6
            },
            {
              "name": "num_inference_steps",
              "value": 18
            }
          ]
        },
        "options": {}
      },
      "id": "93021bb2-9409-443f-84da-471db6356bbe",
      "name": "fal.ai - Quality Upscaling",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "euNrl93DdMoiaTaF",
          "name": "falAiApi"
        }
      },
      "notes": "üìã PRODUCTION: Quality upscaling using clarity-upscaler"
    },
    {
      "parameters": {
        "jsCode": "// üìã PRODUCTION FINALIZE AVATAR PROCESSING\n// Prepares final data for database update with comprehensive error handling\nconst upscaleResponse = $input.first().json;\nconst inputData = $('Process Avatar Generation').first().json;\n\nconsole.log('üîç Upscaling Response:', JSON.stringify(upscaleResponse, null, 2));\n\n// Extract upscaled image URL with fallback handling\nlet upscaledUrl = null;\n\nif (upscaleResponse.image && upscaleResponse.image.url) {\n  upscaledUrl = upscaleResponse.image.url;\n} else if (upscaleResponse.images && upscaleResponse.images[0] && upscaleResponse.images[0].url) {\n  upscaledUrl = upscaleResponse.images[0].url;\n} else if (upscaleResponse.url) {\n  upscaledUrl = upscaleResponse.url;\n} else if (upscaleResponse.data && upscaleResponse.data.image_url) {\n  upscaledUrl = upscaleResponse.data.image_url;\n} else {\n  // Fallback to generated avatar if upscaling failed\n  console.warn('‚ö†Ô∏è Upscaling failed, using generated avatar as fallback');\n  upscaledUrl = inputData.avatarGeneratedUrl;\n}\n\n// Determine final avatar URL\nconst finalAvatarUrl = upscaledUrl;\n\n// Calculate quality score\nconst wasUpscaled = upscaledUrl !== inputData.avatarGeneratedUrl;\nconst qualityScore = wasUpscaled ? 95 : 85;\n\nconsole.log('‚úÖ Avatar processing finalized');\nconsole.log('üéØ Final Avatar URL:', finalAvatarUrl);\nconsole.log('üìä Quality Score:', qualityScore);\nconsole.log('üîß Was Upscaled:', wasUpscaled);\n\nreturn {\n  ...inputData,\n  finalAvatarUrl: finalAvatarUrl,\n  upscaledUrl: upscaledUrl,\n  qualityScore: qualityScore,\n  step3Complete: true,\n  processingProgress: 100,\n  enhancements: {\n    backgroundRemoved: true,\n    aiGenerated: true,\n    upscaled: wasUpscaled,\n    finalQuality: 'high'\n  },\n  processingComplete: true\n};"
      },
      "id": "f3e515fb-dd05-4113-bf57-1a45760cba2b",
      "name": "Finalize Avatar Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300],
      "notes": "üìã PRODUCTION: Finalizes processing with comprehensive error handling"
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "update",
        "table": "user_avatars",
        "updateKey": "id",
        "records": [
          {
            "id": "={{ $json.avatarId }}",
            "avatar_url": "={{ $json.finalAvatarUrl }}",
            "processing_status": "completed",
            "background_removed_url": "={{ $json.backgroundRemovedUrl }}",
            "avatar_generated_url": "={{ $json.avatarGeneratedUrl }}",
            "original_image_url": "={{ $json.originalImageUrl }}",
            "n8n_task_id": "={{ $workflow.executionId }}",
            "enhancement_metadata": "={{ JSON.stringify($json.enhancements) }}",
            "quality_score": "={{ $json.qualityScore }}",
            "avatar_type": "ai_generated",
            "updated_at": "={{ new Date().toISOString() }}"
          }
        ]
      },
      "id": "5d600bcc-64c4-4a20-ae3d-ff476e65d625",
      "name": "Update Avatar in Database",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2000, 300],
      "credentials": {
        "supabaseApi": {
          "id": "qgelUsV83pwvgAJW",
          "name": "Supabase account"
        }
      },
      "notes": "üìã PRODUCTION: Updates avatar record in Supabase with all processing results"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"Avatar created successfully\",\n  \"avatarId\": $json.avatarId,\n  \"avatarUrl\": $('Finalize Avatar Processing').first().json.finalAvatarUrl,\n  \"intermediateResults\": {\n    \"backgroundRemovedUrl\": $('Finalize Avatar Processing').first().json.backgroundRemovedUrl,\n    \"avatarGeneratedUrl\": $('Finalize Avatar Processing').first().json.avatarGeneratedUrl,\n    \"upscaledUrl\": $('Finalize Avatar Processing').first().json.upscaledUrl\n  },\n  \"enhancements\": $('Finalize Avatar Processing').first().json.enhancements,\n  \"qualityScore\": $('Finalize Avatar Processing').first().json.qualityScore,\n  \"executionId\": $workflow.executionId,\n  \"processingTime\": new Date().getTime() - new Date($('Finalize Avatar Processing').first().json.timestamp).getTime(),\n  \"processingSteps\": {\n    \"backgroundRemoval\": \"completed\",\n    \"avatarGeneration\": \"completed\",\n    \"qualityUpscaling\": \"completed\",\n    \"databaseUpdate\": \"completed\"\n  }\n} }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "b5f0fc0b-e00a-4874-9cd9-b920c498d986",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2220, 300],
      "notes": "üìã PRODUCTION: Returns comprehensive success response with all processing details"
    }
  ],
  "connections": {
    "Avatar Creation Webhook": {
      "main": [
        [
          {
            "node": "Input Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Validator": {
      "main": [
        [
          {
            "node": "fal.ai - Background Removal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fal.ai - Background Removal": {
      "main": [
        [
          {
            "node": "Process Background Removal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Background Removal": {
      "main": [
        [
          {
            "node": "fal.ai - Flux Avatar Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fal.ai - Flux Avatar Generation": {
      "main": [
        [
          {
            "node": "Process Avatar Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Avatar Generation": {
      "main": [
        [
          {
            "node": "fal.ai - Quality Upscaling",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fal.ai - Quality Upscaling": {
      "main": [
        [
          {
            "node": "Finalize Avatar Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finalize Avatar Processing": {
      "main": [
        [
          {
            "node": "Update Avatar in Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Avatar in Database": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Avatar Creation Webhook": [
      {
        "headers": {
          "host": "localhost:5678",
          "connection": "keep-alive",
          "content-type": "application/json",
          "accept": "*/*",
          "accept-language": "*",
          "sec-fetch-mode": "cors",
          "user-agent": "node",
          "accept-encoding": "gzip, deflate",
          "content-length": "267"
        },
        "params": {},
        "query": {},
        "body": {
          "avatarId": "test-avatar-123",
          "userId": "test-user-456",
          "originalImageUrl": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=600&fit=crop&crop=face",
          "processingSettings": {
            "backgroundRemoval": true,
            "qualityEnhancement": true,
            "resolution": "1024x1024"
          }
        },
        "webhookUrl": "http://localhost:5678/webhook/avatar-creation",
        "executionMode": "production"
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-13T10:00:00.000Z",
      "updatedAt": "2025-01-13T10:00:00.000Z",
      "id": "avatar-creation-final",
      "name": "avatar-creation-final"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-01-13T10:00:00.000Z",
  "versionId": "final-production-v1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "df3d111ed4abd77a90921bd793d6e31da557462ca67d77912524a031b710db43"
  }
} 